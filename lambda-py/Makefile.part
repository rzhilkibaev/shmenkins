# This file is included into a service specific Makefile
# (see builder, scheduler,...)
# All paths in this file are relative to that Makefile

# use current directory name as service name
service_name := $(shell basename $(shell pwd))

# this location is relative to the Makefile we are included into
vars_file := ../Makefile.vars
include $(vars_file)

# don't run integration tests
test:
	tox

# Quick test without tox
quick-test:
	source venv/bin/activate && \
		cd src && \
		python -m pytest ../tests

# run integration tests only
# need to run pytest as a module and from src
# so the src is added to the PYTHONPATH
itest:
	source venv/bin/activate && \
		cd src && \
		python -m pytest -m 'integration' ../tests

# Configures this project
init:
	cp $(vars_file).template $(vars_file) && \
		${EDITOR} $(vars_file)

# Creates venv
virtualenv:
	virtualenv venv -p python3.6

# Makes a lambda zip
zip:
	rm -rf tmp && \
		mkdir tmp && \
		cp -r src/** tmp && \
		cp -r venv/lib/python3.5/site-packages/shmenkins tmp && \
		cd tmp && \
		zip -r $(service_name).zip '.' --include '*.py' && \
		mv $(service_name).zip ../ && \
		cd .. && \
		rm -rf tmp

#	cd src && \
#		zip -r $(service_name).zip '.' --include '*.py' && \
#		mv $(service_name).zip ../ && \
#		cd ../ && \
#		zip -u $(service_name).zip /

# Copies the lambda zip to S3 so it's available to terraform
publish: zip
	aws s3 cp $(service_name).zip s3://$(bucket)/artifacts/$(service_name).zip

clean:
	rm -rf $(service_name).zip dist build .cache .tox

# Makes a wheel
# mvn package
wheel: clean
	source venv/bin/activate && \
		python setup.py bdist_wheel

# Copies the wheel to a ~/.cache/shmenkins so it's available to other project
# mvn install
upload-local: wheel
	mkdir -p ~/.cache/shmenkins && \
		cp dist/*.whl ~/.cache/shmenkins/

# Installs all project requirements
# mvn dependency:go-offline
install-requirements:
	source venv/bin/activate && \
		pip install \
		-r requirements.txt \
		--force-reinstall \
		--upgrade \
		--find-links ~/.cache/shmenkins
